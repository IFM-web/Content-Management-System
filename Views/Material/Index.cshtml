@model ContentManagementSystem.Models.MaterialViewModel

@{
  ///  var urlBase = "https://yourdomain.com/api/"; // Set your base URL for API calls here
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <strong>Error!</strong> @TempData["Error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <strong>Please correct the following errors:</strong>
        <ul>
            @foreach (var modelState in ViewData.ModelState.Values)
            {
                foreach (var error in modelState.Errors)
                {
                    <li>@error.ErrorMessage</li>
                }
            }
        </ul>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="container-fluid">
    <div class="row">
        <!-- Sidebar -->
        @await Html.PartialAsync("_Sidebar")

        <!-- Main content -->
        <div class="col-md-10">
            <div class="container mt-4">
                @* <h2>Material IN</h2> *@
                <h3>Invoice Input Form</h3>

                @using (Html.BeginForm("Create", "Material", FormMethod.Post, new { enctype = "multipart/form-data", id = "materialForm", onsubmit = "return validateForm()" }))
                {
                    @Html.AntiForgeryToken()
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                @Html.LabelFor(m => m.NewMaterial.InvoiceNo, "Invoice Number", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.NewMaterial.InvoiceNo, new { 
                                    @class = "form-control", 
                                    placeholder = "Enter Invoice Number", 
                                    required = "required",
                                    pattern = "^[a-zA-Z0-9-_/\\s]+$",
                                    title = "Invoice number can contain letters, numbers, hyphens, underscores, forward slashes and spaces"
                                })
                                @Html.ValidationMessageFor(m => m.NewMaterial.InvoiceNo, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group mb-3">
                                @Html.LabelFor(m => m.NewMaterial.CompanyId, "Company", new { @class = "form-label" })
                                @Html.DropDownListFor(m => m.NewMaterial.CompanyId, (SelectList)ViewBag.Companies, null, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.NewMaterial.CompanyId, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group mb-3">
                                @Html.LabelFor(m => m.NewMaterial.AssetItemId, "Asset Item", new { @class = "form-label" })
                                @Html.DropDownListFor(m => m.NewMaterial.AssetItemId, 
                                    (SelectList)ViewBag.AssetItems, 
                                    "Select Asset",
                                    new { @class = "form-control", required = "required" })
                                @Html.ValidationMessageFor(m => m.NewMaterial.AssetItemId, "", new { @class = "text-danger" })
                            </div>
                            <div id="customAssetNameDiv" style="display:none;" class="form-group mb-3">
                                <label class="form-label">Custom Asset Name</label>
                                <input type="text" class="form-control" name="NewMaterial.CustomAssetName" id="customAssetName" placeholder="Optional" />
                            </div>
                            <div class="form-group mb-3">
                                @Html.LabelFor(m => m.NewMaterial.CustomVendorName, "Vendor", new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.NewMaterial.CustomVendorName, new { 
                                    @class = "form-control", 
                                    placeholder = "Enter Vendor Name",
                                    required = "required"
                                })
                                @Html.ValidationMessageFor(m => m.NewMaterial.CustomVendorName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                @Html.LabelFor(m => m.NewMaterial.ManufacturerId, "Manufacturer", new { @class = "form-label" })
                                @Html.DropDownListFor(m => m.NewMaterial.ManufacturerId, (SelectList)ViewBag.Manufacturers, "Select Manufacturer", new { @class = "form-control", required = "required" })
                                @Html.ValidationMessageFor(m => m.NewMaterial.ManufacturerId, "", new { @class = "text-danger" })
                            </div>
                            <div id="customManufacturerNameDiv" style="display:none;" class="form-group mb-3">
                                <label class="form-label">Custom Manufacturer Name</label>
                                <input type="text" class="form-control" name="NewMaterial.CustomManufacturerName" id="customManufacturerName" placeholder="Enter Manufacturer Name" />
                            </div>
                            <div class="form-group mb-3">
                                @Html.LabelFor(m => m.NewMaterial.BillDate, "Bill Date", new { @class = "form-label" })
                                <div class="input-group">
                                    <input type="text" 
                                           id="BillDate" 
                                           name="NewMaterial.BillDate" 
                                           class="form-control date-picker" 
                                           required 
                                           placeholder="DD/MM/YYYY"
                                           autocomplete="off" />
                                    <span class="input-group-text">
                                        <i class="fas fa-calendar"></i>
                                    </span>
                                </div>
                                @Html.ValidationMessageFor(m => m.NewMaterial.BillDate, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group mb-3">
                                <label class="form-label">Received Date</label>
                                <div class="input-group">
                                    <input type="text" 
                                           class="form-control date-picker" 
                                           name="ReceivedDate" 
                                           required 
                                           placeholder="DD/MM/YYYY"
                                           autocomplete="off" />
                                    <span class="input-group-text">
                                        <i class="fas fa-calendar"></i>
                                    </span>
                                </div>
                            </div>
                            <div class="form-group mb-3">
                                @Html.LabelFor(m => m.NewMaterial.ReqnQuantity, "Receive Quantity", new { @class = "form-label" })
                                <div class="input-group">
                                    @Html.TextBoxFor(m => m.NewMaterial.ReqnQuantity, new { @class = "form-control", type = "number", min = "1", value = "1", id = "reqnQuantity" })
                                    <button type="button" class="btn btn-secondary" onclick="decrementQuantity()">-</button>
                                    <button type="button" class="btn btn-secondary" onclick="incrementQuantity()">+</button>
                                </div>
                                @Html.ValidationMessageFor(m => m.NewMaterial.ReqnQuantity, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Invoice Image</label>
                        <div>
                            <button type="button" class="btn btn-secondary" onclick="uploadInvoice()">
                                <i class="fas fa-upload"></i> Upload Invoice Images
                            </button>
                            <input type="file" id="invoiceUpload" name="ImageFile" style="display: none;" />
                        </div>
                    </div>

                    <div class="table-responsive">
                        <table class="table table-bordered" id="itemsTable">
                            <thead>
                                <tr>
                                    <th>Sr No</th>
                                    <th>Serial No</th>
                                    <th id="thItemName" style="display:none;">Item Name</th>
                                    <th id="thWarrantyDate">Warranty Date</th>
                                    <th>Model No</th>
                                    <th id="thGeneration" style="display:none;">Generation</th>
                                    <th id="thProcessor" style="display:none;">Processor</th>
                                    <th id="thRAM" style="display:none;">RAM (GB)</th>
                                    <th id="thHDD" style="display:none;">Hard Disk</th>
                                    <th id="thSSD" style="display:none;">SSD</th>
                                    <th id="thOther" style="display:none;">Other</th>
                                </tr>
                            </thead>
                            <tbody id="itemsTableBody">
                            </tbody>
                        </table>

                    </div>

                    <div class="text-end">
                        <button type="submit" class="btn btn-primary">Submit</button>
                        @* <a href="@Url.Action("InvoiceRecord", "Material")" class="btn btn-secondary">View All Invoices</a> *@
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css">
    <style>
        .datepicker {
            z-index: 1060 !important;
        }

        .input-group-text {
            cursor: pointer;
        }

        .input-group-text:hover {
            background-color: #e9ecef;
        }

        .datepicker table tr td.today {
            background-color: #FFF176 !important;
            border-color: #FFE082 !important;
        }

        .datepicker table tr td.active {
            background-color: #007bff !important;
            border-color: #0056b3 !important;
        }

        .btn-success {
            transition: all 0.3s ease;
        }

        #imagePreview {
            transition: all 0.3s ease;
        }

        .img-thumbnail {
            border: 2px solid #28a745;
        }

        #fileName {
            font-size: 0.875rem;
        }

        .storage-input.is-valid {
            background-image: url("data:image/svg+xml,..."); /* Your existing valid icon */
            border-color: #198754;
        }
        
        .storage-input.is-invalid {
            background-image: url("data:image/svg+xml,..."); /* Your existing invalid icon */
            border-color: #dc3545;
        }
        
        .storage-input:focus {
            box-shadow: none;
        }

        .is-invalid {
            border-color: #dc3545;
            padding-right: calc(1.5em + 0.75rem);
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }

        .invalid-feedback {
            display: block;
            width: 100%;
            margin-top: 0.25rem;
            font-size: 0.875em;
            color: #dc3545;
        }

        .alert {
            margin-bottom: 1rem;
        }

        .alert ul {
            margin-bottom: 0;
            padding-left: 1.5rem;
        }
    </style>
}

@section Scripts {
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>
    
    <script>
        function updateTableRows() {
            const quantity = parseInt(document.getElementById('reqnQuantity').value);
            const assetType = $("#NewMaterial_AssetItemId option:selected").text();
            const tbody = document.getElementById('itemsTableBody');
            tbody.innerHTML = '';

            const isComputerAsset = assetType === 'Desktop' || assetType === 'Laptop' || assetType === 'Server';
            
            // Show/hide columns based on asset type
            document.getElementById('thGeneration').style.display = isComputerAsset ? '' : 'none';
            document.getElementById('thProcessor').style.display = isComputerAsset ? '' : 'none';
            document.getElementById('thHDD').style.display = isComputerAsset ? '' : 'none';
            document.getElementById('thRAM').style.display = isComputerAsset ? '' : 'none';
            document.getElementById('thSSD').style.display = isComputerAsset ? '' : 'none';
            document.getElementById('thItemName').style.display = !isComputerAsset ? '' : 'none';
            document.getElementById('thOther').style.display = ''; // Always show Other column

            for (let i = 0; i < quantity; i++) {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${i + 1}</td>
                    <td>
                        <input type="text" 
                               name="NewMaterial.MaterialItems[${i}].SerialNo" 
                               class="form-control" 
                               required />
                    </td>
                    <td id="tdItemName${i}" style="display:${!isComputerAsset ? '' : 'none'}">
                        <input type="text" 
                               name="NewMaterial.MaterialItems[${i}].ItemName" 
                               class="form-control"
                               ${!isComputerAsset ? 'required' : ''} />
                    </td>
                    <td>
                        <div class="input-group">
                            <input type="text" 
                                   name="NewMaterial.MaterialItems[${i}].WarrantyDate" 
                                   class="form-control date-picker warranty-date" 
                                   placeholder="DD/MM/YYYY"
                                   autocomplete="off" />
                            <span class="input-group-text">
                                <i class="fas fa-calendar"></i>
                            </span>
                        </div>
                    </td>
                    <td>
                        <input type="text" 
                               name="NewMaterial.MaterialItems[${i}].ModelNo" 
                               class="form-control" 
                               required />
                    </td>
                    <td id="tdGeneration${i}" style="display:${isComputerAsset ? '' : 'none'}">
                        <input type="text" 
                               name="NewMaterial.MaterialItems[${i}].Generation" 
                               class="form-control"
                               ${isComputerAsset ? 'required' : ''} />
                    </td>
                    <td id="tdProcessor${i}" style="display:${isComputerAsset ? '' : 'none'}">
                        <input type="text" 
                               name="NewMaterial.MaterialItems[${i}].Processor" 
                               class="form-control"
                               placeholder="Enter Processor"
                               pattern="[a-zA-Z0-9\s-]+"
                               title="Processor can only contain letters, numbers, spaces and hyphens"
                               ${isComputerAsset ? 'required' : ''} />
                    </td>
                    <td id="tdRAM${i}" style="display:${isComputerAsset ? '' : 'none'}">
                        <input type="number" 
                               name="NewMaterial.MaterialItems[${i}].RAMCapacity" 
                               class="form-control"
                               min="1"
                               max="1024"
                               step="1"
                               placeholder="Enter RAM in GB"
                               ${isComputerAsset ? 'required' : ''} />
                    </td>
                    <td id="tdHDD${i}" style="display:${isComputerAsset ? '' : 'none'}">
                        <input type="text" 
                               name="NewMaterial.MaterialItems[${i}].HardDisk" 
                               class="form-control storage-input"
                               pattern="^\d+(\.\d{1,2})?\s*(GB|TB)$"
                               placeholder="e.g., 500 GB, 1 TB"
                               title="Enter size followed by GB or TB (e.g., 500 GB, 1 TB, 2.5 TB)"
                               ${isComputerAsset ? 'required' : ''} />
                    </td>
                    <td id="tdSSD${i}" style="display:${isComputerAsset ? '' : 'none'}">
                        <input type="text" 
                               name="NewMaterial.MaterialItems[${i}].SSDCapacity" 
                               class="form-control storage-input"
                               pattern="^\d+(\.\d{1,2})?\s*(GB|TB)$"
                               placeholder="e.g., 500 GB, 1 TB"
                               title="Enter size followed by GB or TB (e.g., 500 GB, 1 TB, 2.5 TB)"
                               ${isComputerAsset ? 'required' : ''} />
                    </td>
                    <td>
                        <input type="text" 
                               name="NewMaterial.MaterialItems[${i}].Other" 
                               class="form-control" 
                               placeholder="Enter other details" />
                    </td>
                `;
                tbody.appendChild(row);
            }

            // Initialize date pickers for warranty dates
            $('.warranty-date').datepicker({
                format: 'dd/mm/yyyy',
                autoclose: true,
                todayHighlight: true,
                clearBtn: true,
                startDate: '01/01/2000',
                endDate: '31/12/2100'
            });

            // Click handler for calendar icons
            $('.input-group-text').click(function() {
                $(this).closest('.input-group').find('.date-picker').datepicker('show');
            });

            // Update validation when date changes
            $('.warranty-date').on('changeDate', function() {
                $(this).datepicker('hide');
                validateDate($(this));
            });

            // Example AJAX call to fetch data
            $.ajax({
                url: 'your-endpoint', // Use the base URL here
                method: 'GET',
                success: function(data) {
                    // Handle success
                },
                error: function(error) {
                    // Handle error
                }
            });
        }

        function validateDate(input) {
            const value = input.val();
            if (!value) return true;

            const [day, month, year] = value.split('/').map(num => parseInt(num, 10));
            
            // Check if all parts are numbers
            if (isNaN(day) || isNaN(month) || isNaN(year)) {
                showDateError(input, 'Please enter a valid date in DD/MM/YYYY format');
                return false;
            }

            // Check ranges
            if (day < 1 || day > 31 || month < 1 || month > 12 || year < 2000 || year > 2100) {
                showDateError(input, 'Please enter a valid date');
                return false;
            }

            // Create date object for additional validation
            const date = new Date(year, month - 1, day);
            if (date.getDate() !== day || date.getMonth() !== month - 1 || date.getFullYear() !== year) {
                showDateError(input, 'Please enter a valid date');
                return false;
            }

            input.removeClass('is-invalid').addClass('is-valid');
            input.next('.invalid-feedback').remove();
            return true;
        }

        function showDateError(input, message) {
            input.addClass('is-invalid').removeClass('is-valid');
            if (!input.next('.invalid-feedback').length) {
                input.after(`<div class="invalid-feedback">${message}</div>`);
            } else {
                input.next('.invalid-feedback').text(message);
            }
        }

        function incrementQuantity() {
            const input = document.getElementById('reqnQuantity');
            input.value = parseInt(input.value) + 1;
            updateTableRows();
        }

        function decrementQuantity() {
            const input = document.getElementById('reqnQuantity');
            if (parseInt(input.value) > 1) {
                input.value = parseInt(input.value) - 1;
                updateTableRows();
            }
        }

        function uploadInvoice() {
            document.getElementById('invoiceUpload').click();
        }

        // Initialize table on page load
        document.addEventListener('DOMContentLoaded', function() {
            updateTableRows();
        });

        // Update table when REQN quantity changes
        document.getElementById('reqnQuantity').addEventListener('change', updateTableRows);

        // Add event listener for asset item change
        $(document).ready(function() {
            $('#NewMaterial_AssetItemId, #NewMaterial_ManufacturerId').change(function() {
                const assetType = $("#NewMaterial_AssetItemId option:selected").text();
                const manufacturerType = $("#NewMaterial_ManufacturerId option:selected").text();
                
                // Show/hide custom name fields
              //  $('#customAssetNameDiv').toggle(assetType === 'Others');
                $('#customManufacturerNameDiv').toggle(manufacturerType === 'Others');
                
                // Clear and regenerate material items
                //updateTableRows();
            });

            $('#NewMaterial_AssetItemId').change(function () {
                const assetType = $("#NewMaterial_AssetItemId option:selected").text();
                const manufacturerType = $("#NewMaterial_ManufacturerId option:selected").text();

                // Show/hide custom name fields
                  $('#customAssetNameDiv').toggle(assetType === 'Others');
                $('#customManufacturerNameDiv').toggle(manufacturerType === 'Others');

                // Clear and regenerate material items
                //updateTableRows();
            });


        });



        // Add success message handling
        @if (TempData["Success"] != null)
        {
            <text>
            $(document).ready(function() {
                toastr.success('@TempData["Success"]');
            });
            </text>
        }

        function validateSerialNumbers() {
            const serialNumbers = new Set();
            let isValid = true;
            
            $('[name$="SerialNo"]').each(function() {
                const serialNo = $(this).val().trim();
                if (serialNo) {
                    if (serialNumbers.has(serialNo)) {
                        $(this).addClass('is-invalid');
                        if (!$(this).next('.invalid-feedback').length) {
                            $(this).after('<div class="invalid-feedback">Serial number must be unique</div>');
                        }
                        isValid = false;
                        toastr.error('Duplicate serial number found: ' + serialNo);
                    } else {
                        serialNumbers.add(serialNo);
                        $(this).removeClass('is-invalid');
                        $(this).next('.invalid-feedback').remove();
                    }
                }
            });
            
            return isValid;
        }

        function validateForm() {
            let isValid = true;
            let errors = [];

            // Check if invoice number is provided
            const invoiceNo = $('#NewMaterial_InvoiceNo').val();
            if (!invoiceNo) {
                errors.push('Invoice number is required');
                $('#NewMaterial_InvoiceNo').addClass('is-invalid');
            }

            // Check if company is selected
            const companyId = $('#NewMaterial_CompanyId').val();
            if (!companyId) {
                errors.push('Please select a company');
                $('#NewMaterial_CompanyId').addClass('is-invalid');
            }

            // Check if asset item is selected
            const assetItemId = $('#NewMaterial_AssetItemId').val();
            if (!assetItemId) {
                errors.push('Please select an asset item');
                $('#NewMaterial_AssetItemId').addClass('is-invalid');
            }

            // Validate serial numbers
            const serialNumbers = new Set();
            $('input[name$=".SerialNo"]').each(function() {
                const serialNo = $(this).val().trim();
                if (!serialNo) {
                    errors.push('Serial number cannot be empty');
                    $(this).addClass('is-invalid');
                    isValid = false;
                } else if (serialNumbers.has(serialNo)) {
                    errors.push(`Duplicate serial number found: ${serialNo}`);
                    $(this).addClass('is-invalid');
                    isValid = false;
                }
                serialNumbers.add(serialNo);
            });

            // Existing storage validation
            $('.storage-input').each(function() {
                const value = $(this).val().toUpperCase();
                if (value && !/^\d+(\.\d{1,2})?\s*(GB|TB)$/.test(value)) {
                    $(this).addClass('is-invalid');
                    errors.push(`Invalid storage format: ${value}. Please use format like "500 GB" or "1 TB"`);
                    isValid = false;
                }
            });

            // Show errors if any
            if (errors.length > 0) {
                // Show each error as a toastr notification
                errors.forEach(error => {
                    toastr.error(error);
                });

                // Create an error summary
                const errorHtml = `
                    <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                        <strong>Please correct the following errors:</strong>
                        <ul>
                            ${errors.map(error => `<li>${error}</li>`).join('')}
                        </ul>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                `;

                // Show error summary at the top of the form
                $('#materialForm').prepend(errorHtml);

                // Scroll to the top of the form
                $('html, body').animate({
                    scrollTop: $('#materialForm').offset().top - 100
                }, 500);

                return false;
            }

            return isValid;
        }

        // Clear validation state when input changes
        $(document).on('input', '.form-control', function() {
            $(this).removeClass('is-invalid');
        });

        // Initialize toastr options
        toastr.options = {
            closeButton: true,
            progressBar: true,
            preventDuplicates: true,
            positionClass: 'toast-top-right',
            timeOut: 5000
        };

        $('#NewMaterial_ManufacturerId').change(function() {
            const manufacturerType = $(this).find("option:selected").text();
            $('#customManufacturerNameDiv').toggle(manufacturerType === 'Others');
            if (manufacturerType === 'Others') {
                $('#customManufacturerName').prop('required', true);
            } else {
                $('#customManufacturerName').prop('required', false).val('');
            }
        });

        $(document).ready(function() {
            $(document).on('blur', '[name$="WarrantyDate"]', function() {
                const value = $(this).val();
                if (value && !validateDate($(this))) {
                    $(this).addClass('is-invalid');
                    $(this).next('.invalid-feedback').remove();
                    $(this).after('<div class="invalid-feedback">Please enter a valid date in DD/MM/YYYY format</div>');
                }
            });
        });

        $('#NewMaterial_AssetItemId').change(function () {
            var selectedAsset = $(this).find("option:selected").text();
            if (selectedAsset === "Desktop" || selectedAsset === "Laptop" || selectedAsset === "Server") {
                $('#thGeneration, #thProcessor, #thHDD, #thRAM, #thSSD').show();
                $('#thItemName').hide();
                $('#thOther').show();
            } else {
                $('#thGeneration, #thProcessor, #thHDD, #thRAM, #thSSD').hide();
                $('#thItemName').show();
                $('#thOther').show();
            }
            
            // Clear and regenerate material items
            updateTableRows();
        });

        // Handle Invoice Number validation
        $('#NewMaterial_InvoiceNo').on('input', function() {
            const value = $(this).val().toUpperCase();
            $(this).val(value);
            const regex = /^[a-zA-Z0-9-_/\s]+$/;
            
            if (!regex.test(value)) {
                $(this).addClass('is-invalid');
                if (!$(this).next('.invalid-feedback').length) {
                    $(this).after('<div class="invalid-feedback">Invoice number can only contain letters, numbers, hyphens, underscores, forward slashes and spaces</div>');
                }
            } else {
                $(this).removeClass('is-invalid').addClass('is-valid');
                $(this).next('.invalid-feedback').remove();
            }
        });

        // Add real-time invoice number availability check
        $('#NewMaterial_InvoiceNo').on('blur', function() {
            const invoiceNo = $(this).val().trim();
            if (!invoiceNo) return;

            $.ajax({
                url: myurl + '/Material/CheckInvoiceNumber',
                type: 'GET',
                data: { invoiceNo: invoiceNo },
                success: function(response) {
                    const input = $('#NewMaterial_InvoiceNo');
                    if (!response.isAvailable) {
                        input.removeClass('is-valid').addClass('is-invalid');
                        if (!input.next('.invalid-feedback').length) {
                            input.after(`<div class="invalid-feedback">${response.message}</div>`);
                        } else {
                            input.next('.invalid-feedback').text(response.message);
                        }
                        toastr.error(response.message);
                    } else {
                        input.removeClass('is-invalid').addClass('is-valid');
                        input.next('.invalid-feedback').remove();
                    }
                },
                error: function() {
                    toastr.error('Error checking invoice number availability');
                }
            });
        });

        // Set max date for Received Date
        $(document).ready(function() {
            const today = new Date().toISOString().split('T')[0];
            $('input[name="ReceivedDate"]').attr('max', today);
            
            // Set default value to today
            $('input[name="ReceivedDate"]').val(today);
            
            // Prevent future date selection
            $('input[name="ReceivedDate"]').on('input', function() {
                const selectedDate = new Date($(this).val());
                const currentDate = new Date();
                
                // Reset to today if future date is selected
                if (selectedDate > currentDate) {
                    $(this).val(today);
                    toastr.warning('Future dates are not allowed');
                }
            });
        });

        // Date handling functions
        function initializeDateInputs() {
            // Initialize all date inputs
            $('.bill-date, .received-date, .warranty-date').each(function() {
                initializeDateInput($(this));
            });
        }

        function initializeDateInput(input) {
            input.off('input').on('input', function() {
                let value = $(this).val();
                
                // Remove any non-numeric characters except /
                value = value.replace(/[^\d/]/g, '');
                
                // Automatically add slashes
                if (value.length >= 2 && value.charAt(2) !== '/') {
                    value = value.slice(0, 2) + '/' + value.slice(2);
                }
                if (value.length >= 5 && value.charAt(5) !== '/') {
                    value = value.slice(0, 5) + '/' + value.slice(5);
                }
                
                // Limit the length
                if (value.length > 10) {
                    value = value.slice(0, 10);
                }
                
                $(this).val(value);
                
                // Validate the date
                if (value.length === 10) {
                    validateDate($(this));
                }
            });

            // Add blur validation
            input.off('blur').on('blur', function() {
                const value = $(this).val();
                if (value && value.length !== 10) {
                    showDateError($(this), 'Please enter a complete date in DD/MM/YYYY format');
                }
            });
        }

        function validateDate(input) {
            const value = input.val();
            if (!value) return true;

            const [day, month, year] = value.split('/').map(num => parseInt(num, 10));
            
            // Check if all parts are numbers
            if (isNaN(day) || isNaN(month) || isNaN(year)) {
                showDateError(input, 'Please enter a valid date in DD/MM/YYYY format');
                return false;
            }

            // Check ranges
            if (day < 1 || day > 31 || month < 1 || month > 12 || year < 2000 || year > 2100) {
                showDateError(input, 'Please enter a valid date');
                return false;
            }

            // Create date object for additional validation
            const date = new Date(year, month - 1, day);
            if (date.getDate() !== day || date.getMonth() !== month - 1 || date.getFullYear() !== year) {
                showDateError(input, 'Please enter a valid date');
                return false;
            }

            input.removeClass('is-invalid').addClass('is-valid');
            input.next('.invalid-feedback').remove();
            return true;
        }

        function showDateError(input, message) {
            input.addClass('is-invalid').removeClass('is-valid');
            if (!input.next('.invalid-feedback').length) {
                input.after(`<div class="invalid-feedback">${message}</div>`);
            } else {
                input.next('.invalid-feedback').text(message);
            }
        }

        // Initialize dates on document ready
        $(document).ready(function() {
            initializeDateInputs();
            
            // Set today's date for received date
            const today = new Date();
            const formattedToday = `${String(today.getDate()).padStart(2, '0')}/${String(today.getMonth() + 1).padStart(2, '0')}/${today.getFullYear()}`;
            $('.received-date').val(formattedToday);
        });

        // Update form validation
        function validateForm() {
            let isValid = true;
            
            // Validate all date inputs
            $('.bill-date, .received-date, .warranty-date').each(function() {
                const value = $(this).val();
                if (value && !validateDate($(this))) {
                    isValid = false;
                }
            });

            // ... rest of your existing validation code ...

            return isValid;
        }

        $(document).ready(function() {
            // Initialize all date pickers
            $('.date-picker').datepicker({
                format: 'dd/mm/yyyy',
                autoclose: true,
                todayHighlight: true,
                clearBtn: true
            });

            // Set today's date for received date
            const today = new Date();
            const formattedToday = `${String(today.getDate()).padStart(2, '0')}/${String(today.getMonth() + 1).padStart(2, '0')}/${today.getFullYear()}`;
            $('input[name="ReceivedDate"]').val(formattedToday);

            // Prevent future dates for received date
            $('input[name="ReceivedDate"]').datepicker('setEndDate', 'today');

            // Click handler for calendar icons
            $('.input-group-text').click(function() {
                $(this).closest('.input-group').find('.date-picker').datepicker('show');
            });

            // Validate dates when changed
            $('.date-picker').on('changeDate', function() {
                $(this).datepicker('hide');
                validateDate($(this));
            });
        });

        // Add this to your existing JavaScript
        $(document).on('input', '[name$="CPUCapacity"]', function() {
            let value = this.value;
            
            // Remove any characters that aren't numbers or decimal point
            value = value.replace(/[^\d.]/g, '');
            
            // Ensure only one decimal point
            const parts = value.split('.');
            if (parts.length > 2) {
                value = parts[0] + '.' + parts.slice(1).join('');
            }
            
            // Limit to 2 decimal places
            if (parts.length > 1) {
                value = parts[0] + '.' + parts[1].slice(0, 2);
            }
            
            this.value = value;
        });

        // Add real-time validation for serial numbers
        $(document).on('input', '[name$="SerialNo"]', function() {
            validateSerialNumbers();
        });

        // Add this after the existing uploadInvoice function
        document.getElementById('invoiceUpload').addEventListener('change', function(e) {
            if (e.target.files.length > 0) {
                // Change the upload button color and text to show success
                const uploadButton = document.querySelector('button[onclick="uploadInvoice()"]');
                uploadButton.classList.remove('btn-secondary');
                uploadButton.classList.add('btn-success');
                uploadButton.innerHTML = '<i class="fas fa-check"></i> Image Uploaded';
                
                // Show the file name
                const fileName = e.target.files[0].name;
                if (!document.getElementById('fileName')) {
                    const fileNameDiv = document.createElement('div');
                    fileNameDiv.id = 'fileName';
                    fileNameDiv.className = 'mt-2 text-success';
                    uploadButton.parentNode.appendChild(fileNameDiv);
                }
                document.getElementById('fileName').textContent = 'Selected file: ' + fileName;
                
                // Optional: Show preview if it's an image
                const fileReader = new FileReader();
                fileReader.onload = function(event) {
                    if (!document.getElementById('imagePreview')) {
                        const previewDiv = document.createElement('div');
                        previewDiv.id = 'imagePreview';
                        previewDiv.className = 'mt-2';
                        const previewImg = document.createElement('img');
                        previewImg.style.maxHeight = '100px';
                        previewImg.className = 'img-thumbnail';
                        previewDiv.appendChild(previewImg);
                        uploadButton.parentNode.appendChild(previewDiv);
                    }
                    document.querySelector('#imagePreview img').src = event.target.result;
                };
                fileReader.readAsDataURL(e.target.files[0]);
            }
        });

        // Add this function to your existing JavaScript
        function checkSerialNumber(input) {
            const serialNo = $(input).val().trim();
            if (!serialNo) return;

            $.ajax({
                url: myurl + '/Material/CheckSerialNumber',
                type: 'GET',
                data: { serialNo: serialNo },
                success: function(response) {
                    if (!response.isAvailable) {
                        $(input).addClass('is-invalid');
                        if (!$(input).next('.invalid-feedback').length) {
                            $(input).after(`<div class="invalid-feedback">${response.message}</div>`);
                        } else {
                            $(input).next('.invalid-feedback').text(response.message);
                        }
                        toastr.error(response.message);
                    } else {
                        $(input).removeClass('is-invalid').addClass('is-valid');
                        $(input).next('.invalid-feedback').remove();
                    }
                },
                error: function() {
                    toastr.error('Error checking serial number availability');
                }
            });
        }

        // Add this to your existing updateTableRows function
        $('input[name$="SerialNo"]').on('blur', function() {
            checkSerialNumber(this);
        });

        // Add this to your existing JavaScript section
        $(document).ready(function() {
            // Storage input validation
            $(document).on('input', '.storage-input', function() {
                let value = this.value.toUpperCase();
                
                // Remove any characters that aren't numbers, decimal point, or GB/TB
                value = value.replace(/[^0-9.GBTB\s]/g, '');
                
                // Ensure only one decimal point
                const parts = value.split('.');
                if (parts.length > 2) {
                    value = parts[0] + '.' + parts.slice(1).join('');
                }
                
                // Limit to 2 decimal places
                if (parts.length > 1) {
                    value = parts[0] + '.' + parts[1].slice(0, 2);
                }
                
                // Ensure proper spacing before unit
                value = value.replace(/\s+/g, ' ').replace(/([0-9])([GT])/g, '$1 $2');
                
                // Auto-complete unit if user types G or T
                if (value.endsWith(' G')) value += 'B';
                if (value.endsWith(' T')) value += 'B';
                
                this.value = value;
                
                // Validate format
                const isValid = /^\d+(\.\d{1,2})?\s*(GB|TB)$/.test(value);
                if (isValid) {
                    $(this).removeClass('is-invalid').addClass('is-valid');
                } else {
                    $(this).removeClass('is-valid').addClass('is-invalid');
                }
            });
        });

        // Add validation to the form submission
        function validateForm() {
            let isValid = true;
            
            // Validate storage inputs
            $('.storage-input').each(function() {
                const value = $(this).val().toUpperCase();
                if (value && !/^\d+(\.\d{1,2})?\s*(GB|TB)$/.test(value)) {
                    $(this).addClass('is-invalid');
                    toastr.error('Please enter storage values in the format: 500 GB or 1 TB');
                    isValid = false;
                }
            });
            
            // ... rest of your existing validation code ...
            
            return isValid;
        }
    </script>
}

<style>
    .accordion-button:not(.collapsed) {
        background-color: #e7f1ff;
        color: #0c63e4;
    }
    
    .accordion-button:focus {
        box-shadow: none;
        border-color: rgba(0,0,0,.125);
    }
    
    .accordion-button span {
        flex: 1;
        text-align: left;
        margin-right: 1rem;
    }
    
    .table-sm td, .table-sm th {
        padding: 0.5rem;
        vertical-align: middle;
    }

    .accordion-body {
        padding: 1.5rem;
    }

    .table-hover tbody tr:hover {
        background-color: rgba(0,0,0,.075);
    }
</style> 